
//Author: Deepak Patil
//Description: Class to print various types of patterns, such as triangle, square, pyramids and some complex patterns.

public class PatternMaking {  
    //Basic Patterns: Square, Rectangle and Triangle

    public static void printSquare(Integer n)
    {
        String pattern = '';
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<=n; j++)
            {
                if(i==1 || i==n || j ==1 || j == n)
                    pattern +='* ';
                else
                {
                    pattern += '  ';
                }
            }
            pattern += '\n';
        }
        
        System.debug('\n'+pattern);
    }
    
    /* 
        rows = 10
		columns = 15

        * * * * * * * * * * * * * * * 
        *                           * 
        *                           * 
        *                           * 
        *                           * 
        *                           * 
        *                           * 
        *                           * 
        *                           * 
        * * * * * * * * * * * * * * * 
    */
    
    public static void printRectangle(Integer rows, Integer columns)
    {
        String pattern = '';        
        
        for(Integer i = 1; i <= rows; i++) {
            for(Integer j = 1; j <= columns; j++) {
                if(i == 1 || i == rows || j == 1 || j == columns)
                    pattern +='* ';
                else
                    pattern += '  ';
            }
            pattern+='\n'; 
        }
        System.debug('\n'+pattern);        
    }
    
    /*
     N = 10
                 * 
                * * 
               *   * 
              *     * 
             *       * 
            *         * 
           *           * 
          *             * 
         *               * 
        * * * * * * * * * * 
	*/
    
    
    public static void printTriangle(Integer n)
    {
        String pattern = '';
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<(n-i+1); j++)
            {
                pattern +=' ';
            }
            for(Integer k=1; k<=i; k++)
            {
                if(i>2 && i<n && k != 1 && k != i)
                {
                    pattern+='  ';
                }
                else
                {
                    pattern +='* '; 
                }                
            }
            pattern +='\n';
        }
        
        System.debug('\n'+pattern);
    }
    
    //Pyramid Structures: Left, Right, Down Slanting, Upper Mid Pramid, Down Mid Praymid.
    
    
	/*
		N = 10 

        * 
        * * 
        * * * 
        * * * * 
        * * * * * 
        * * * * * * 
        * * * * * * * 
        * * * * * * * * 
        * * * * * * * * * 
        * * * * * * * * * *      
	
	*/
    
    public static void leftSlantTriangle(Integer n)
    {
        String pattern = '';
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<=i; j++)
            {
                pattern+='* ';
            }
            pattern+= '\n';
        }
        System.debug('\n'+pattern);
    }
    
     /*
    	N = 10 

        * * * * * * * * * * 
        * * * * * * * * * 
        * * * * * * * * 
        * * * * * * * 
        * * * * * * 
        * * * * * 
        * * * * 
        * * * 
        * * 
        * 

	*/
    
    public static void leftDownTriangle(Integer n)
    {
        String pattern ='';
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<=n-i+1; j++)
            {
                pattern+='* ';
            }
            pattern+='\n';
        }
        System.debug('\n'+pattern);
    }
    /* 
         N = 10 
                 * 
                * * 
               * * * 
              * * * * 
             * * * * * 
            * * * * * * 
           * * * * * * * 
          * * * * * * * * 
         * * * * * * * * * 
        * * * * * * * * * *      
	*/
    public static void middleUpperTriangle(Integer n)
    {
        String pattern = '';
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<(n-i+1); j++)
            {
                pattern +=' ';
            }
            for(Integer k=1; k<=i; k++)
            {
                pattern +='* ';
            }
            pattern +='\n';
        }
        
        System.debug('\n'+pattern);
    }
   
    /*
     	N = 10 
        * * * * * * * * * * 
         * * * * * * * * * 
          * * * * * * * * 
           * * * * * * * 
            * * * * * * 
             * * * * * 
              * * * * 
               * * * 
                * * 
                 * 
	*/
        
    public static void middleDownTriangle(Integer n)
    {
        String pattern = '';
        for(Integer j=1; j<=n; j++)
        {
            for(Integer k=1; k<=j-1; k++)
            {
                pattern+=' ';
            }
            for(Integer l=n-j; l>=0; l--)
            {
                pattern+='* ';
            }
            pattern+='\n';
        }
        System.debug('\n'+pattern);
    }
    
     /*
        N = 10
                          * 
                        * * 
                      * * * 
                    * * * * 
                  * * * * * 
                * * * * * * 
              * * * * * * * 
            * * * * * * * * 
          * * * * * * * * * 
        * * * * * * * * * * 
    
     */
    
    public static void rightSlantTriangle(Integer n)
    {
        String pattern = '';
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<=(n-i); j++)
            {
                pattern +='  ';
            }
            for(Integer k=1; k<=i; k++)
            {
                pattern +='* ';
            }
            pattern +='\n';
        }
        System.debug('\n'+pattern);
    }

        /*
         N size 10

               * 
              * * 
             * * * 
            * * * * 
           * * * * * 
          * * * * * * 
         * * * * * * * 
        * * * * * * * * 
       * * * * * * * * * 
      * * * * * * * * * *
       * * * * * * * * * 
        * * * * * * * * 
         * * * * * * * 
          * * * * * * 
           * * * * * 
            * * * * 
             * * * 
              * * 
               * 
    
         */

    public static void printDiamond(Integer n)
    {
		boolean printBlankOnce = true;
        String pattern = '';
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<(n-i+1); j++)
            {
                if(j == 1) //Adding extra space on the left most triangle
                	pattern +='   ';
                else
                    pattern +=' ';
            }
            for(Integer k=1; k<=i; k++)
            {
                    
                if(i == n)
                {
                    if(printBlankOnce)
                    {
                        pattern += ' ';
                        printBlankOnce = false;
                    }
                   pattern +=' *'; 
                }
                else
                {
                    pattern += '* ';
                }
                
            }
            pattern +='\n';
        }
        pattern='\n'+pattern;
        for(Integer j=1; j<=n-1; j++)
        {
            for(Integer k=1; k<=j; k++)
            {
                if(k == 1)
                {
                    pattern+='   ';
                }
                else
                {
                    pattern+=' ';
                }
            }
            for(Integer l=n-j-1; l>=0; l--)
            {
                pattern+='* ';
            }
            pattern+='\n';
        }
        System.debug('\n'+pattern);
        
    }
    
    /*
     
	N = 10

        * * * * * * * * * * 
         * * * * * * * * * 
          * * * * * * * * 
           * * * * * * * 
            * * * * * * 
             * * * * * 
              * * * * 
               * * * 
                * * 
                 * 
                 * 
                * * 
               * * * 
              * * * * 
             * * * * * 
            * * * * * * 
           * * * * * * * 
          * * * * * * * * 
         * * * * * * * * * 
        * * * * * * * * * *      
	*/    
    public static void mirrorTriangle(Integer n)
    {
        String pattern = '';
        for(Integer j=1; j<=n; j++)
        {
            for(Integer k=1; k<=j-1; k++)
            {
                pattern+=' ';
            }
            for(Integer l=n-j; l>=0; l--)
            {
                pattern+='* ';
            }
            pattern+='\n';
        }
        
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<(n-i+1); j++)
            {
                pattern +=' ';
            }
            for(Integer k=1; k<=i; k++)
            {
                pattern +='* ';
            }
            pattern +='\n';
        }
        
        System.debug('\n'+pattern);
        
        
    }
    

    /*
    N=10

    *                                     * 
    * *                                 * * 
    * * *                             * * * 
    * * * *                         * * * * 
    * * * * *                     * * * * * 
    * * * * * *                 * * * * * * 
    * * * * * * *             * * * * * * * 
    * * * * * * * *         * * * * * * * * 
    * * * * * * * * *     * * * * * * * * * 
    * * * * * * * * * * * * * * * * * * * * 
    * * * * * * * * *     * * * * * * * * * 
    * * * * * * * *         * * * * * * * * 
    * * * * * * *             * * * * * * * 
    * * * * * *                 * * * * * * 
    * * * * *                     * * * * * 
    * * * *                         * * * * 
    * * *                             * * * 
    * *                                 * * 
    *                                     * 
                                        
	*/
    
    
    
    public static void printMirrorTriangleHorizontal(Integer n)
    {
        String pattern = '';
        if(n == null || n == 0)
            return;
        String extraSpace ='';
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<=i; j++)
            {
                pattern += '* ';
            }
            pattern+=extraSpace;
            for(Integer l=1; l<=2*(n-i); l++)
            {
                pattern +=  '  ';
            }
            for(Integer k=1; k<=i; k++)
            {
                pattern =  pattern +  '* ';
            }
            pattern += '\n';
        }
        
        //Downward Pattern.
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<=n-i; j++)
            {
                pattern+='* ';
            }
            for(Integer k=1; k<=2*i; k++)
            {
                pattern +='  ';
            }
            for(Integer y=1; y<=(n-i); y++)
            {
                pattern+='* ';
            }
            pattern+='\n';
        }
        
        
        System.debug('\n'+pattern);
        
    }
    
    /*
	N=10

    * * * * * * * * * * * * * * * * * * * * 
    * * * * * * * * *     * * * * * * * * * 
    * * * * * * * *         * * * * * * * * 
    * * * * * * *             * * * * * * * 
    * * * * * *                 * * * * * * 
    * * * * *                     * * * * * 
    * * * *                         * * * * 
    * * *                             * * * 
    * *                                 * * 
    *                                     * 
    *                                     * 
    * *                                 * * 
    * * *                             * * * 
    * * * *                         * * * * 
    * * * * *                     * * * * * 
    * * * * * *                 * * * * * * 
    * * * * * * *             * * * * * * * 
    * * * * * * * *         * * * * * * * * 
    * * * * * * * * *     * * * * * * * * * 
    * * * * * * * * * * * * * * * * * * * * 

	*/
    
    public static void printHollowDiamondPattern(Integer n)
    {
        if(n == null || n <= 0)
        {
            return;
        }
        String pattern = '';
        //Upper part of the pattern
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=n; j>=i; j--)
            {
                pattern +='* ';
            }
            for(Integer k=1; k<=2*(i-1); k++)
            {
                pattern+='  ';
            }
            for(Integer l=n; l>=i; l--)
            {
                pattern +='* ';
            }
            pattern+='\n';
        }
        
        //Lower part of the pattern
        for(Integer i=1; i<=n; i++)
        {
            for(Integer j=1; j<=i; j++)
            {
                pattern += '* ';
            }
            for(Integer l=1; l<=2*(n-i); l++)
            {
                pattern +=  '  ';
            }
            for(Integer k=1; k<=i; k++)
            {
                pattern =  pattern +  '* ';
            }
            pattern += '\n';
        }
        System.debug('\n'+pattern);
    }
    
    
    
}
